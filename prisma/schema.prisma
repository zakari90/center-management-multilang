generator client {
  provider = "prisma-client-js"
}
// const DATABASE_URL_LOCAL = "postgresql://postgres:123456789@localhost:5432/postgres?schema=public";

// const LOCAL_MONGO_DB = "mongodb://127.0.0.1:27017/?directConnection=true&serverSelectionTimeoutMS=2000&appName=mongosh+2.3.8"


//
datasource db {
  provider = "mongodb"
  url      = "mongodb://127.0.0.1:27017/?directConnection=true&serverSelectionTimeoutMS=2000&appName=mongosh+2.3.8"
}


//
enum Role {
  ADMIN 
  MANAGER
}

enum ReceiptType {
  STUDENT_PAYMENT
  TEACHER_PAYMENT
}

model Center {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  address     String?
  phone       String?
  classrooms  String[]
  workingDays String[]
  managers    String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  admin       User       @relation("AdminCenters", fields: [adminId], references: [id])
  adminId     String     @db.ObjectId
  schedules   Schedule[]
  subjects    Subject[]
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  password  String
  name      String
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  managedStudents     Student[]   @relation("UserManagedStudents")
  managedTeachers     Teacher[]   @relation("UserManagedTeachers")
  managedReceipts     Receipt[]   @relation("UserManagedReceipts")
  administeredCenters Center[]    @relation("AdminCenters")
  schedules           Schedule[]  @relation("ManagerSchedules")
}

model Teacher {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String?  @unique
  phone          String?
  address        String?
  weeklySchedule String[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  manager           User                @relation("UserManagedTeachers", fields: [managerId], references: [id])
  managerId         String              @db.ObjectId
  schedules         Schedule[]
  teacherSubjects   TeacherSubject[]
  studentSubjects   StudentSubject[]    @relation("StudentTeacher")
  receipts          Receipt[]
}

model Student {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String?  @unique
  phone       String?
  parentName  String?
  parentPhone String?
  parentEmail String?
  grade       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  manager         User              @relation("UserManagedStudents", fields: [managerId], references: [id])
  managerId       String            @db.ObjectId
  studentSubjects StudentSubject[]
  receipts        Receipt[]
}

model Subject {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   
  grade     String  
  price     Float
  duration  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  center              Center            @relation(fields: [centerId], references: [id])
  centerId            String            @db.ObjectId
  schedules           Schedule[]
  teacherSubjects     TeacherSubject[]
  studentSubjects     StudentSubject[]
}

model TeacherSubject {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  percentage Float?
  hourlyRate Float?
  assignedAt DateTime @default(now())
  
  teacher    Teacher  @relation(fields: [teacherId], references: [id])
  teacherId  String   @db.ObjectId
  subject    Subject  @relation(fields: [subjectId], references: [id])
  subjectId  String   @db.ObjectId
}

model StudentSubject {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  enrolledAt DateTime @default(now())

  student    Student  @relation(fields: [studentId], references: [id])
  studentId  String   @db.ObjectId
  subject    Subject  @relation(fields: [subjectId], references: [id])
  subjectId  String   @db.ObjectId
  teacher    Teacher  @relation("StudentTeacher", fields: [teacherId], references: [id])
  teacherId  String   @db.ObjectId
}

model Receipt {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  receiptNumber String      @unique 
  amount        Float
  type          ReceiptType
  description   String?
  paymentMethod String?
  date          DateTime    @default(now())
  createdAt     DateTime    @default(now())

  student   Student? @relation(fields: [studentId], references: [id])
  studentId String?  @db.ObjectId

  teacher   Teacher? @relation(fields: [teacherId], references: [id])
  teacherId String?  @db.ObjectId

  manager   User   @relation("UserManagedReceipts", fields: [managerId], references: [id])
  managerId String @db.ObjectId
}

model Schedule {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  day       String
  startTime String
  endTime   String
  roomId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  teacher   Teacher  @relation(fields: [teacherId], references: [id])
  teacherId String   @db.ObjectId
  
  subject   Subject  @relation(fields: [subjectId], references: [id])
  subjectId String   @db.ObjectId
  
  manager   User     @relation("ManagerSchedules", fields: [managerId], references: [id])
  managerId String   @db.ObjectId
  
  center    Center?  @relation(fields: [centerId], references: [id])
  centerId  String?  @db.ObjectId
}
