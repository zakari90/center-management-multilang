// Custom service worker with SKIP_WAITING handler
import { clientsClaim } from 'workbox-core';
import { precacheAndRoute, cleanupOutdatedCaches } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { CacheFirst, NetworkFirst } from 'workbox-strategies';
import { ExpirationPlugin } from 'workbox-expiration';

// Extend ServiceWorkerGlobalScope to include Workbox properties
declare global {
  interface ServiceWorkerGlobalScope {
    __WB_DISABLE_DEV_LOGS: boolean;
    __WB_MANIFEST: any;
  }
}

declare const self: ServiceWorkerGlobalScope;

// Disable dev logs
self.__WB_DISABLE_DEV_LOGS = true;

// Handle SKIP_WAITING message - THIS IS CRITICAL FOR UPDATE FUNCTIONALITY
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    console.log('[SW] Received SKIP_WAITING message, activating new version');
    self.skipWaiting().then(() => {
      // After skip waiting, notify all clients
      self.clients.matchAll().then(clients => {
        clients.forEach(client => {
          client.postMessage({
            type: 'SW_UPDATED',
            message: 'Service worker updated successfully'
          });
        });
      });
    });
  }
});

// Precache all the assets generated by next-pwa
precacheAndRoute(self.__WB_MANIFEST);

// Clean up old caches
cleanupOutdatedCaches();

// Allow service worker to claim clients immediately
clientsClaim();

// Cache static resources (CSS, JS, images)
registerRoute(
  /^\/(_next\/static|static)\/.*/i,
  new CacheFirst({
    cacheName: 'static-resources',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 64,
        maxAgeSeconds: 365 * 24 * 60 * 60, // 1 year
      }),
    ],
  }),
  'GET'
);

// API routes - Network first with cache fallback
registerRoute(
  /\/api\/.*/,
  new NetworkFirst({
    cacheName: 'api-cache',
    networkTimeoutSeconds: 10,
    plugins: [
      new ExpirationPlugin({
        maxEntries: 50,
        maxAgeSeconds: 5 * 60, // 5 minutes
      }),
    ],
  }),
  'GET'
);

// Dynamic pages - Network first with cache fallback
registerRoute(
  /^\/(en|ar|fr)\/(manager|admin)\/.*/,
  new NetworkFirst({
    cacheName: 'dynamic-pages',
    networkTimeoutSeconds: 10,
    plugins: [
      new ExpirationPlugin({
        maxEntries: 100,
        maxAgeSeconds: 24 * 60 * 60, // 24 hours
      }),
    ],
  }),
  'GET'
);

// Log service worker lifecycle events
self.addEventListener('install', () => {
  console.log('[SW] Service worker installed');
});

self.addEventListener('activate', (event) => {
  console.log('[SW] Service worker activated');
});

